#write a program to implement Binary Tree with insertion,deletion,travelsal operations

# BT Insertion
class Tree:
    def __init__(self, value):
        self.value = value
        self.left = None
        self.right = None

    def Inorder(self):
        if self.left is not None:
            self.left.Inorder()
        print(self.value, end=' ')
        if self.right is not None:
            self.right.Inorder()

    def Insert(self, value):
        if self.value is None:
            self.value = value
        elif value < self.value:
            if self.left is None:
                self.left = Tree(value)
            else:
                self.left.Insert(value)
        else:
            if self.right is None:
                self.right = Tree(value)
            else:
                self.right.Insert(value)

Root = Tree(6)
Root.Insert(4)
Root.Insert(2)
Root.Insert(5)
Root.Insert(9)
Root.Insert(8)
Root.Insert(10)
print("Inorder traversal after insertion: ", end='')
Root.Inorder()

#BT Deletion
class Tree:
    def __init__(self, value):
        self.value = value
        self.left = None
        self.right = None

    def Inorder(self):
        if self.left is not None:
            self.left.Inorder()
        print(self.value, end=' ')
        if self.right is not None:
            self.right.Inorder()

    def Insert(self, value):
        if self.value is None:
            self.value = value
        elif value < self.value:
            if self.left is None:
                self.left = Tree(value)
            else:
                self.left.Insert(value)
        else:
            if self.right is None:
                self.right = Tree(value)
            else:
                self.right.Insert(value)

    def Delete(self, root, value):
        if root is None:
            return root
        if value < root.value:
            root.left = self.Delete(root.left, value)
        elif value > root.value:
            root.right = self.Delete(root.right, value)
        else:
            if root.left is None and root.right is None:
                return None
            elif root.right is None:
                return root.left
            elif root.left is None:
                return root.right
            else:
                temp = root.right
                while temp.left is not None:
                    temp = temp.left
                root.value = temp.value
                root.right = self.Delete(root.right, temp.value)
        return root

Root = Tree(6)
Root.Insert(4)
Root.Insert(2)
Root.Insert(5)
Root.Insert(9)
Root.Insert(8)
Root.Insert(10)

print("Inorder traversal after insertion: ", end='')
Root.Inorder()
print()

Root = Root.Delete(Root, 2)
print('\n 2 is deleted: ', end='')
Root.Inorder()
print()

Root = Root.Delete(Root, 4)
print('\n 4 is deleted: ', end='')
Root.Inorder()
print()

Root = Root.Delete(Root, 6)
print('\n 6 is deleted: ', end='')
Root.Inorder()
print()

#BT with Taversal
class Node:
    def __init__(self, key):
        self.left = None
        self.right = None
        self.val = key

def printInorder(root):
    if root:
        printInorder(root.left)
        print(root.val, end=' ')
        printInorder(root.right)

def printPostorder(root):
    if root:
        printPostorder(root.left)
        printPostorder(root.right)
        print(root.val, end=' ')

def printPreorder(root):
    if root:
        print(root.val, end=' ')
        printPreorder(root.left)
        printPreorder(root.right)

root = Node(1)
root.left = Node(2)
root.right = Node(3)
root.left.left = Node(4)
root.left.right = Node(5)

print("Preorder traversal of binary tree is")
printPreorder(root)
print()

print("Inorder traversal of binary tree is")
printInorder(root)
print()

print("Postorder traversal of binary tree is")
printPostorder(root)
print()
